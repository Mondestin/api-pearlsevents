name: 'User Management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/profile
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get current user's profile"
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "id": 1,
              "name": "John Doe",
              "email": "john@example.com",
              "role": "client",
              "created_at": "2024-01-01T00:00:00.000000Z",
              "updated_at": "2024-01-01T00:00:00.000000Z",
              "bookings": [
                {
                  "id": 1,
                  "quantity": 2,
                  "event": {
                    "id": 1,
                    "name": "Summer Concert",
                    "date": "2024-06-15T19:00:00.000000Z"
                  }
                }
              ],
              "events": []
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "message": "Failed to load user profile"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/profile
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update the specified user's profile"
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: false
        example: 'John Smith'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email of the user. Must be unique.'
        required: false
        example: john.smith@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password for the user. Minimum 8 characters.'
        required: false
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'The role of the user (admin or client). Only admins can change roles.'
        required: false
        example: client
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Smith'
      email: john.smith@example.com
      password: newpassword123
      role: client
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User updated successfully",
            "data": {
              "id": 1,
              "name": "John Smith",
              "email": "john.smith@example.com",
              "role": "client",
              "created_at": "2024-01-01T00:00:00.000000Z",
              "updated_at": "2024-01-01T00:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized to update this user"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Only admins can change user roles"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Validation failed",
            "errors": {
              "email": ["The email has already been taken."],
              "password": ["The password must be at least 8 characters."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/change-password
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change user password'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: "The user's current password."
        required: true
        example: oldpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'The new password (min 8 characters).'
        required: true
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password_confirmation:
        name: new_password_confirmation
        description: 'Confirmation of the new password.'
        required: true
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: oldpassword123
      new_password: newpassword123
      new_password_confirmation: newpassword123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Password changed successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Current password is incorrect"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The new password confirmation does not match."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of users (admin only)'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      role:
        name: role
        description: 'Filter users by role (admin or client).'
        required: false
        example: client
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      search:
        name: search
        description: 'Search users by name or email.'
        required: false
        example: john
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Number of results per page.'
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      role: client
      search: john
      per_page: 15
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "data": [
                {
                  "id": 1,
                  "name": "John Doe",
                  "email": "john@example.com",
                  "role": "client",
                  "created_at": "2024-01-01T00:00:00.000000Z",
                  "updated_at": "2024-01-01T00:00:00.000000Z"
                }
              ],
              "current_page": 1,
              "per_page": 15,
              "total": 1
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Only admins can view all users"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created user (admin only)'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email of the user. Must be unique.'
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password for the user. Minimum 8 characters.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'The role of the user (admin or client). Defaults to client.'
        required: false
        example: client
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john@example.com
      password: password123
      role: client
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "message": "User created successfully",
            "data": {
              "id": 1,
              "name": "John Doe",
              "email": "john@example.com",
              "role": "client",
              "created_at": "2024-01-01T00:00:00.000000Z",
              "updated_at": "2024-01-01T00:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Only admins can create users"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Validation failed",
            "errors": {
              "email": ["The email has already been taken."],
              "password": ["The password must be at least 8 characters."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified user'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: architecto
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "id": 1,
              "name": "John Doe",
              "email": "john@example.com",
              "role": "client",
              "created_at": "2024-01-01T00:00:00.000000Z",
              "updated_at": "2024-01-01T00:00:00.000000Z",
              "bookings": [
                {
                  "id": 1,
                  "quantity": 2,
                  "event": {
                    "id": 1,
                    "name": "Summer Concert",
                    "date": "2024-06-15T19:00:00.000000Z"
                  }
                }
              ],
              "events": []
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized to view this user"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\User]."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update the specified user's profile"
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: architecto
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: false
        example: 'John Smith'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email of the user. Must be unique.'
        required: false
        example: john.smith@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password for the user. Minimum 8 characters.'
        required: false
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'The role of the user (admin or client). Only admins can change roles.'
        required: false
        example: client
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Smith'
      email: john.smith@example.com
      password: newpassword123
      role: client
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User updated successfully",
            "data": {
              "id": 1,
              "name": "John Smith",
              "email": "john.smith@example.com",
              "role": "client",
              "created_at": "2024-01-01T00:00:00.000000Z",
              "updated_at": "2024-01-01T00:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized to update this user"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Only admins can change user roles"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Validation failed",
            "errors": {
              "email": ["The email has already been taken."],
              "password": ["The password must be at least 8 characters."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified user (admin only)'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user to delete.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: architecto
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User deleted successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Cannot delete your own account"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Cannot delete user with existing bookings or events"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Only admins can delete users"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_id}/bookings'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get user's bookings"
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 1
    queryParameters:
      per_page:
        name: per_page
        description: 'Number of results per page.'
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 15
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "data": [
                {
                  "id": 1,
                  "quantity": 2,
                  "event": {
                    "id": 1,
                    "name": "Summer Concert",
                    "date": "2024-06-15T19:00:00.000000Z"
                  },
                  "ticket": {
                    "id": 1,
                    "type": "VIP",
                    "price": "150.00"
                  }
                }
              ],
              "current_page": 1,
              "per_page": 15,
              "total": 1
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized to view this user's bookings"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_id}/events'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get user's events (for admin users)"
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 1
    queryParameters:
      per_page:
        name: per_page
        description: 'Number of results per page.'
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 15
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "data": [
                {
                  "id": 1,
                  "name": "Summer Concert",
                  "description": "A great summer concert",
                  "date": "2024-06-15T19:00:00.000000Z",
                  "tickets": [
                    {
                      "id": 1,
                      "type": "VIP",
                      "price": "150.00",
                      "quantity": 100
                    }
                  ],
                  "bookings": [
                    {
                      "id": 1,
                      "quantity": 2,
                      "user_id": 2
                    }
                  ]
                }
              ],
              "current_page": 1,
              "per_page": 15,
              "total": 1
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Only admins can view user's events"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_id}/statistics'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get user statistics (admin only)'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "total_bookings": 5,
              "total_events_created": 2,
              "total_tickets_booked": 10,
              "upcoming_bookings": 3,
              "past_bookings": 2
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Only admins can view user statistics"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - authorization
      - 'Bearer {YOUR_TOKEN_HERE}'
    controller: null
    method: null
    route: null
    custom: []
